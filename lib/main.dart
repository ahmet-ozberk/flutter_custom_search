import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:grock/grock.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Material App',
      home: Home(),
      navigatorKey: Grock.navigationKey,
      scaffoldMessengerKey: Grock.snackbarMessengerKey,
    );
  }
}

class Home extends StatefulWidget {
  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  bool isLoading = false;
  final dio = Dio();
  late FocusNode _focusNode;

  /// TODO: Arama işlemi değişkenleri
  TextEditingController searchController = TextEditingController();
  bool isSearch = false;
  List<PeopleModelData?> peopleList = [];
  List<PeopleModelData?> searchList = [];

  void searchFunc(String value) {
    for (var people in peopleList) {
      if (people!.firstName!
          .toLowerCase()
          .trim()
          .contains(searchController.text.toLowerCase().trim())) {
        searchList.add(people);
        setState(() {});
      }
    }
  }

  ///

  Future<PeopleModel> getData() async {
    setState(() {
      isLoading = true;
    });
    final response = await dio.get('https://reqres.in/api/users?page=2');
    return PeopleModel.fromJson(response.data);
  }

  @override
  void initState() {
    super.initState();
    _focusNode = FocusNode();
    getData().then((value) => setState(() {
          peopleList = value.data!;
          isLoading = false;
        }));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CupertinoNavigationBar(
        middle: appbarTitle(),
        trailing: searchIconWidget(),
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator.adaptive())
          : GrockList(
              itemCount:
                  searchList.isNotEmpty ? searchList.length : peopleList.length,
              itemBuilder: (context, index) {
                var item = searchList.isNotEmpty
                    ? searchList[index]!
                    : peopleList[index]!;
                return Card(
                  child: ListTile(
                    title: Text(
                      "${item.firstName} ${item.lastName}",
                    ),
                    subtitle: Text(
                      "${item.email}",
                    ),
                    leading: CircleAvatar(
                      backgroundImage: NetworkImage(item.avatar!),
                    ),
                  ),
                );
              },
            ),
    );
  }

  Widget appbarTitle() {
    if (isSearch) {
      return CupertinoTextField(
        controller: searchController,
        focusNode: _focusNode,
        textInputAction: TextInputAction.search,
        placeholder: 'Ara',
        onSubmitted: (value) {
          searchFunc(value);
        },
      );
    } else {
      return const Text('Ana Sayfa');
    }
  }

  Widget searchIconWidget() {
    if (isSearch) {
      return GrockContainer(
        padding: 10.onlyLeftP,
        child: const Icon(CupertinoIcons.clear, size: 24),
        onTap: () {
          setState(() {
            _focusNode.unfocus();
            isSearch = false;
            searchList.clear();
          });
        },
      );
    } else {
      return GrockContainer(
        padding: 10.onlyLeftP,
        child: const Icon(CupertinoIcons.search, size: 24),
        onTap: () {
          setState(() {
            _focusNode.requestFocus();
            isSearch = true;
          });
        },
      );
    }
  }
}

// MODEL
///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class PeopleModelSupport {
  String? url;
  String? text;

  PeopleModelSupport({
    this.url,
    this.text,
  });
  PeopleModelSupport.fromJson(Map<String, dynamic> json) {
    url = json['url']?.toString();
    text = json['text']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['url'] = url;
    data['text'] = text;
    return data;
  }
}

class PeopleModelData {
  int? id;
  String? email;
  String? firstName;
  String? lastName;
  String? avatar;

  PeopleModelData({
    this.id,
    this.email,
    this.firstName,
    this.lastName,
    this.avatar,
  });
  PeopleModelData.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    email = json['email']?.toString();
    firstName = json['first_name']?.toString();
    lastName = json['last_name']?.toString();
    avatar = json['avatar']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['email'] = email;
    data['first_name'] = firstName;
    data['last_name'] = lastName;
    data['avatar'] = avatar;
    return data;
  }
}

class PeopleModel {
  int? page;
  int? perPage;
  int? total;
  int? totalPages;
  List<PeopleModelData?>? data;
  PeopleModelSupport? support;

  PeopleModel({
    this.page,
    this.perPage,
    this.total,
    this.totalPages,
    this.data,
    this.support,
  });
  PeopleModel.fromJson(Map<String, dynamic> json) {
    page = json['page']?.toInt();
    perPage = json['per_page']?.toInt();
    total = json['total']?.toInt();
    totalPages = json['total_pages']?.toInt();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <PeopleModelData>[];
      v.forEach((v) {
        arr0.add(PeopleModelData.fromJson(v));
      });
      data = arr0;
    }
    support = (json['support'] != null)
        ? PeopleModelSupport.fromJson(json['support'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['page'] = page;
    data['per_page'] = perPage;
    data['total'] = total;
    data['total_pages'] = totalPages;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['data'] = arr0;
    }
    if (support != null) {
      data['support'] = support!.toJson();
    }
    return data;
  }
}
